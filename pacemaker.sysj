import org.pacemaker.*;

reaction AtriumSensorPacer(:
		input signal PWAVE,
		input signal lastVentricularActivity,
		output boolean signal lastAtriumActivity, 
		output boolean signal atriumActivityOccured, 
		output boolean signal ventricularActivityOccured)
{
	signal PVARP,VAI,VAI2;
	{ // Checking atrium Activity
		while(true) {
			if(#atriumActivityOccured == Boolean.FALSE){
				present(PVARP){
					trap(IntrinsicAA){
						// Reading a sensor
						abort(immediate VAI){
							while(true){
								abort(immediate !PWAVE){
									trap(T){
										int i = 0;
										loop { i = i + 1; pause; if (i >= Intervals.P) exit (T); }
									}
									System.out.println("A : PWAVE detected!");
									exit(IntrinsicAA);
								}
								pause;
							}
						} do{
							System.out.println("A : PWAVE NOT detected!");
							// Time elapse since lastVentricularActivity >= VAI
							emit atriumActivityOccured(true);
							// Time elapse since atrium activity >= VAI
							present(VAI2){
								// release atrium paceer
								emit lastAtriumActivity;
								// wait for 1 ms
								trap(T1){
									int i = 0;
									loop { i = i + 1; pause; if(i == 2) exit (T1); }
								}
								emit ventricularActivityOccured(false);
								System.out.println("A : Atrium paced");
							}
						}
					} do{
						// Intrinsic Atrium activity sensed
						emit lastAtriumActivity;
						emit atriumActivityOccured(true);
						emit ventricularActivityOccured(false);
						System.out.println("A : Intrinsic activity sensed");
					}
				}
			}
			pause;
		}
	}
	||
	{
		{// Time elapse since lastVentricularActivity >= PVARP
			while(true){
				abort(lastVentricularActivity){
					trap(T){
						int i = 0;
						while(true) { i = i + 1; pause; if(i >= Intervals.PVARP) exit (T); }
					}
					// If time elapsed since lastVentricularActivity >= PVARP
					sustain PVARP;
				}
				pause;
			}
		}
		||
		{
			while(true){
				abort(lastVentricularActivity){
					trap(T){
						int i = 0;
						while(true) { i = i + 1; pause; if(i >= Intervals.VAI) exit (T); }
					}
					// If time elapsed since lastVentricularActivity >= PVARP
					sustain VAI;
				}
				pause;
			}
		}
		||
		{
			while(true){
				abort(lastAtriumActivity){
					trap(T){
						int i = 0;
						while(true) { i = i + 1; pause; if(i >= Intervals.VAI) exit (T); }
					}
					// If time elapsed since lastAtriumActivity >= PVARP
					sustain VAI2;
				}
				pause;
			}
		}
	}
}

reaction VentricularSensorPacer(:
		output signal lastVentricularActivity,
		output boolean signal atriumActivityOccured,
		output boolean signal ventricularActivityOccured,
		input signal lastAtriumActivity,
		input signal QRScomplex
		)
{
	signal AVI,PVARPAVI;
	{
		while(true){
			if(#ventricularActivityOccured == Boolean.FALSE){
				// Reading a sensor
				abort(immediate AVI){
					trap(IntrinsicQRS){
						while(true){
							abort(immediate !QRScomplex){
								trap(T){
									int i = 0;
									while(true) { i = i + 1; pause; if(i >= Intervals.QRS) exit (T); }
								}
								exit(IntrinsicQRS);
							}
							pause;
						}
					} do{
						System.out.println("V : QRSComplex detected!");
						emit lastVentricularActivity;
						emit atriumActivityOccured(false);
					}
				} do{
					System.out.println("V : QRSComplex NOT detected");
					// Release ventricular pacer
					// Time elapsed since lastVentricularActivity >= PVARP+AVI
					present(PVARPAVI){
						emit lastVentricularActivity;
						// wait for 1 ms
						trap(T){
							int i = 0;
							while (true) { i = i + 1; pause; if(i == 2) exit(T); }
						}
						emit atriumActivityOccured(false);
						System.out.println("V : Ventricular paced");
					}
					pause;
				}
				emit ventricularActivityOccured(true);
				// TODO: Check for mode change
			}
			pause;
		}
	}
	||
	{
		{
			while(true){
				abort(lastAtriumActivity){
					trap(T){
						int i = 0;
						while(true) { i = i + 1; pause; if(i >= Intervals.AVI) exit (T); }
					}
					sustain AVI;
				}
				pause;
			}
		}
		||
		{
			while(true){
				abort(lastVentricularActivity){
					trap(T){
						int i = 0;
						while (true) { i = i + 1; pause; if(i >= Intervals.PVARP + Intervals.AVI) exit(T); }
					}
					sustain PVARPAVI;
				}
			}
		}
	}
	pause;
}

pace->{
	signal PWAVE,QRScomplex;
	boolean signal lastVentricularActivity,lastAtriumActivity,atriumActivityOccured,ventricularActivityOccured;
	// Initialization
	emit ventricularActivityOccured(false);
	emit atriumActivityOccured(false);
	pause;

	AtriumSensorPacer(:PWAVE,lastVentricularActivity,lastAtriumActivity,atriumActivityOccured,ventricularActivityOccured)
	||
	VentricularSensorPacer(:lastVentricularActivity,atriumActivityOccured,ventricularActivityOccured,lastAtriumActivity,QRScomplex)
	||
	{
		// Test-bench
		
	}

}
