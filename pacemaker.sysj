import org.pacemaker.*;

reaction AtriumSensor(:
		input signal PWAVE,
		input signal lastVentricularActivity,
		output boolean signal lastAtriumActivity, 
		output boolean signal atriumActivityOccured, 
		output boolean signal ventricularActivityOccured){
	signal PVARP,VentricularActivity;
	{ // Checking atrium Activity
		while(true) {
			if(#atriumActivityOccured == Boolean.TRUE){
				present(PVARP){
					trap(IntrinsicAA){
						trap(VAIExpired){
							{// Reading a sensor
								while(true){
									abort(immediate !PWAVE){
										trap(T1){
											int i = 0;
											loop { i = i + 1 ; pause; if (i >= Intervals.P) exit (T1); }
										}
										exit(IntrinsicAA);
									}
									pause;
								}
							}
							||
							{// Time elapse since lastVentricularActivity >= VAI
								trap(T){
									int i = 0;
									loop { i = i + 1 ; pause; if (i >= Intervals.VAI) exit (T); }
								}
								exit(VAIExpired);
							}
						} do{
							// release atrium paceer
							emit atriumActivityOccured(true);
						}
					} do{
						// Intrinsic Atrium activity sensed
						emit lastAtriumActivity;
						emit atriumActivityOccured(true);
						emit ventricularActivityOccured(false);
					}
				}
			}
			pause;
		}
	}
	||
	{
		while(true){
			abort(lastVentricularActivity){
				trap(T){
					int i = 0;
					while(true) { i = i + 1; pause; if(i >= Intervals.PVARP) exit (T); }
				}
				// If time elapsed since lastVentricularActivity >= PVARP
				sustain PVARP;
			}
			pause;
		}
	}

}

pace->{
	signal PWAVE;
	boolean signal lastVentricularActivity,lastAtriumActivity,atriumActivityOccured,ventricularActivityOccured;

	AtriumSensor(:PWAVE,lastVentricularActivity,lastAtriumActivity,atriumActivityOccured,ventricularActivityOccured)
	||{}
	pause;
}
